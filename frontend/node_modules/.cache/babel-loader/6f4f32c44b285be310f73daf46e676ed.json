{"ast":null,"code":"import { LoginService } from '../../services/LoginService';\nimport { storageService } from '../../services/storageService';\nimport { userService } from '../../services/usersService'; //creators\n\nconst _setProfiles = users => ({\n  type: 'SET_USERS',\n  users\n});\n\nconst _getUser = user => ({\n  type: 'GET_USER',\n  user\n});\n\nconst _setProfile = profile => ({\n  type: 'SET_PROFILE',\n  profile\n});\n\nconst _setNetflixUser = userLogin => ({\n  type: 'SET_NETFLIX_USER',\n  userLogin\n}); // Dispatchers\n//THANK\n\n\nexport function loadProfiles(user) {\n  console.log('user in action to chacke is:', user);\n  return async dispatch => {\n    try {\n      const profiles = await userService.getProfiles(user);\n      console.log('profiles after promis is:', profiles);\n      dispatch(_setProfiles(profiles));\n    } catch (err) {\n      console.log('catch to get users!', err);\n    }\n  };\n}\nexport function getUser(userId) {\n  return dispatch => {\n    const user = userService.getUser(userId);\n    dispatch(_getUser(user));\n  };\n} // export function changeActiveProfile(profile, users) {\n//     return (dispatch) => {\n//         storageService.saveToStorage('profile', profile)\n//         dispatch(_getUser(profile))\n//     }\n// }\n\nexport function setProfile(profile) {\n  return async dispatch => {\n    try {\n      storageService.saveToStorage('profile', profile);\n      dispatch(_setProfile(profile));\n    } catch (err) {\n      console.log('err to set profile is:', err);\n    }\n  };\n}\nexport function setNetflixUser(user) {\n  return async dispatch => {\n    try {\n      const userLogin = await userService.login(user);\n      console.log('userLogin is:', userLogin);\n      dispatch(_setNetflixUser(userLogin));\n    } catch (err) {\n      console.log('err to set user is:', err);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/actions/UserAction.js"],"names":["LoginService","storageService","userService","_setProfiles","users","type","_getUser","user","_setProfile","profile","_setNetflixUser","userLogin","loadProfiles","console","log","dispatch","profiles","getProfiles","err","getUser","userId","setProfile","saveToStorage","setNetflixUser","login"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,WAAT,QAA4B,6BAA5B,C,CAGA;;AACA,MAAMC,YAAY,GAAIC,KAAD,KAAY;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBD,EAAAA;AAArB,CAAZ,CAArB;;AACA,MAAME,QAAQ,GAAIC,IAAD,KAAW;AAAEF,EAAAA,IAAI,EAAE,UAAR;AAAoBE,EAAAA;AAApB,CAAX,CAAjB;;AACA,MAAMC,WAAW,GAAIC,OAAD,KAAc;AAAEJ,EAAAA,IAAI,EAAE,aAAR;AAAuBI,EAAAA;AAAvB,CAAd,CAApB;;AACA,MAAMC,eAAe,GAAIC,SAAD,KAAgB;AAAEN,EAAAA,IAAI,EAAE,kBAAR;AAA4BM,EAAAA;AAA5B,CAAhB,CAAxB,C,CACA;AACA;;;AACA,OAAO,SAASC,YAAT,CAAsBL,IAAtB,EAA4B;AAC/BM,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CP,IAA5C;AACA,SAAO,MAAOQ,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMd,WAAW,CAACe,WAAZ,CAAwBV,IAAxB,CAAvB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCE,QAAzC;AACAD,MAAAA,QAAQ,CAACZ,YAAY,CAACa,QAAD,CAAb,CAAR;AACH,KAJD,CAKA,OAAOE,GAAP,EAAY;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,GAAnC;AACH;AACJ,GATD;AAUH;AAED,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AAC5B,SAAQL,QAAD,IAAc;AACjB,UAAMR,IAAI,GAAGL,WAAW,CAACiB,OAAZ,CAAoBC,MAApB,CAAb;AACAL,IAAAA,QAAQ,CAACT,QAAQ,CAACC,IAAD,CAAT,CAAR;AACH,GAHD;AAIH,C,CACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASc,UAAT,CAAoBZ,OAApB,EAA6B;AAChC,SAAO,MAAOM,QAAP,IAAoB;AACvB,QAAI;AACAd,MAAAA,cAAc,CAACqB,aAAf,CAA6B,SAA7B,EAAwCb,OAAxC;AACAM,MAAAA,QAAQ,CAACP,WAAW,CAACC,OAAD,CAAZ,CAAR;AACH,KAHD,CAIA,OAAOS,GAAP,EAAY;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCI,GAAtC;AACH;AACJ,GARD;AASH;AAED,OAAO,SAASK,cAAT,CAAwBhB,IAAxB,EAA8B;AACjC,SAAO,MAAMQ,QAAN,IAAkB;AACrB,QAAI;AAEA,YAAMJ,SAAS,GAAG,MAAMT,WAAW,CAACsB,KAAZ,CAAkBjB,IAAlB,CAAxB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,SAA7B;AACAI,MAAAA,QAAQ,CAACL,eAAe,CAACC,SAAD,CAAhB,CAAR;AACH,KALD,CAMA,OAAOO,GAAP,EAAY;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,GAAnC;AACH;AACJ,GAVD;AAWH","sourcesContent":["import { LoginService } from '../../services/LoginService';\nimport { storageService } from '../../services/storageService';\nimport { userService } from '../../services/usersService';\n\n\n//creators\nconst _setProfiles = (users) => ({ type: 'SET_USERS', users })\nconst _getUser = (user) => ({ type: 'GET_USER', user })\nconst _setProfile = (profile) => ({ type: 'SET_PROFILE', profile })\nconst _setNetflixUser = (userLogin) => ({ type: 'SET_NETFLIX_USER', userLogin })\n// Dispatchers\n//THANK\nexport function loadProfiles(user) {\n    console.log('user in action to chacke is:', user);\n    return async (dispatch) => {\n        try {\n            const profiles = await userService.getProfiles(user)\n            console.log('profiles after promis is:', profiles);\n            dispatch(_setProfiles(profiles))\n        }\n        catch (err) {\n            console.log('catch to get users!', err);\n        }\n    }\n}\n\nexport function getUser(userId) {\n    return (dispatch) => {\n        const user = userService.getUser(userId)\n        dispatch(_getUser(user))\n    }\n}\n// export function changeActiveProfile(profile, users) {\n//     return (dispatch) => {\n//         storageService.saveToStorage('profile', profile)\n//         dispatch(_getUser(profile))\n//     }\n// }\n\nexport function setProfile(profile) {\n    return async (dispatch) => {\n        try {\n            storageService.saveToStorage('profile', profile)\n            dispatch(_setProfile(profile))\n        }\n        catch (err) {\n            console.log('err to set profile is:', err);\n        }\n    }\n}\n\nexport function setNetflixUser(user) {\n    return async dispatch => {\n        try {\n\n            const userLogin = await userService.login(user)\n            console.log('userLogin is:', userLogin);\n            dispatch(_setNetflixUser(userLogin))\n        }\n        catch (err) {\n            console.log('err to set user is:', err);\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}