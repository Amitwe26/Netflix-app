{"ast":null,"code":"import { httpService } from './httpService';\nimport { storageService } from './storageService';\nconst BASE_URL = 'api';\n\nasync function login(userNetflix) {\n  const user = await httpService.post(`${BASE_URL}/auth/login`, userNetflix);\n\n  if (user) {\n    console.log('user is succses is:', user);\n\n    _saveLocalUser(user);\n\n    return user;\n  } // return httpService.get(`${BASE_URL}/user`)\n\n}\n\nasync function signup(userCred) {\n  const user = await httpService.post(`${BASE_URL}/auth/signup`, userCred.newUser);\n  return _saveLocalUser(user);\n}\n\nfunction addProfile(newProfile, userLogin) {\n  userLogin.profiles.push(newProfile);\n  console.log('userLogin is:', userLogin);\n}\n\nasync function getUser(email, password) {\n  const info = {};\n  info.email = email;\n  info.password = password;\n  const user = await httpService.get(`${BASE_URL}/user`, info);\n  return Promise.resolve(user);\n}\n\nfunction getProfiles(user) {\n  if (Object.keys(user).length === 0) {\n    const profilesFromStorge = storageService.loadFromStorage('profiles');\n    return Promise.resolve(profilesFromStorge);\n  } else {\n    const profilesToUser = user.profiles;\n    storageService.saveToStorage('profiles', profilesToUser);\n    return Promise.resolve(profilesToUser);\n  }\n} // async function getProfile(info) {\n//     const { profileId, nicknameUser } = info\n//     const idx = users.findIndex(user => user.nickname === nicknameUser)\n//     const profile = users[idx].profiles.find(profile => profile._id === profileId)\n//     console.log(' profileis:', profile);\n//     return profile\n// }\n\n\nfunction _saveLocalUser(user) {\n  sessionStorage.setItem('loggedinUser', JSON.stringify(user));\n  return user;\n}\n\nfunction _makeId(length = 5) {\n  var text = \"\";\n  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\nexport const userService = {\n  login,\n  signup,\n  getProfiles,\n  addProfile,\n  _makeId,\n  getUser\n};","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/usersService.js"],"names":["httpService","storageService","BASE_URL","login","userNetflix","user","post","console","log","_saveLocalUser","signup","userCred","newUser","addProfile","newProfile","userLogin","profiles","push","getUser","email","password","info","get","Promise","resolve","getProfiles","Object","keys","length","profilesFromStorge","loadFromStorage","profilesToUser","saveToStorage","sessionStorage","setItem","JSON","stringify","_makeId","text","possible","i","charAt","Math","floor","random","userService"],"mappings":"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","sourcesContent":["\nimport { httpService } from './httpService'\nimport { storageService } from './storageService'\n\nconst BASE_URL = 'api'\n\n\nasync function login(userNetflix) {\n    const user = await httpService.post(`${BASE_URL}/auth/login`, userNetflix)\n    if (user) {\n        console.log('user is succses is:', user);\n        _saveLocalUser(user)\n        return user\n    }\n    // return httpService.get(`${BASE_URL}/user`)\n}\n\nasync function signup(userCred) {\n    const user = await httpService.post(`${BASE_URL}/auth/signup`, userCred.newUser)\n    return _saveLocalUser(user)\n}\n\nfunction addProfile(newProfile, userLogin) {\n    userLogin.profiles.push(newProfile)\n    console.log('userLogin is:', userLogin);\n}\nasync function getUser(email, password) {\n    const info = {}\n    info.email = email\n    info.password = password\n    const user = await httpService.get(`${BASE_URL}/user`, info)\n    return Promise.resolve(user)\n}\n\nfunction getProfiles(user) {\n    if (Object.keys(user).length === 0) {\n        const profilesFromStorge = storageService.loadFromStorage('profiles')\n        return Promise.resolve(profilesFromStorge)\n    } else {\n        const profilesToUser = user.profiles\n        storageService.saveToStorage('profiles', profilesToUser)\n        return Promise.resolve(profilesToUser)\n    }\n\n}\n\n// async function getProfile(info) {\n//     const { profileId, nicknameUser } = info\n//     const idx = users.findIndex(user => user.nickname === nicknameUser)\n//     const profile = users[idx].profiles.find(profile => profile._id === profileId)\n\n//     console.log(' profileis:', profile);\n//     return profile\n// }\n\nfunction _saveLocalUser(user) {\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\n    return user\n}\n\nfunction _makeId(length = 5) {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nexport const userService = {\n    login,\n    signup,\n    getProfiles,\n    addProfile,\n    _makeId,\n    getUser\n}"]},"metadata":{},"sourceType":"module"}