{"ast":null,"code":"var _jsxFileName = \"/Users/amit/Desktop/Dev/Simples/netflix-app/src/cmps/FilterMovie.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useRef } from 'react';\nimport moviesReducer from '../store/reducers/MoviesReducer';\nimport { initialstateMovies } from '../store/reducers/MoviesReducer'; // const initialstateMovies = {\n//     filterByName: null\n// }\n// function moviesReducer(state = initialstateMovies, action) {\n//     switch (action.type) {\n//         case 'FILTER_BY':\n//             return {\n//                 ...state,\n//                 filterByName: action.filterByName\n//             }\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FilterMovie({\n  onSetFilter\n}) {\n  _s();\n\n  const inputRef = useRef(null);\n  const [state, dispatch] = useReducer(moviesReducer, initialstateMovies);\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n  useEffect(() => {\n    onSetFilter({ ...state\n    });\n  }, [state]);\n  const {\n    filterByName\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      className: \"filterMovies\",\n      type: \"text\",\n      value: filterByName,\n      onChange: ev => dispatch({\n        type: 'FILTER_BY',\n        filterByName: ev.target.value\n      }),\n      placeholder: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FilterMovie, \"33SSu3uJC6qPt6Fic2OFwhJ6Mjc=\");\n\n_c = FilterMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterMovie\");","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/src/cmps/FilterMovie.jsx"],"names":["React","useEffect","useReducer","useRef","moviesReducer","initialstateMovies","FilterMovie","onSetFilter","inputRef","state","dispatch","current","focus","filterByName","ev","type","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,kBAAT,QAAmC,iCAAnC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,OAAO,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAsC;AAAA;;AACzC,QAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACE,aAAD,EAAgBC,kBAAhB,CAApC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,KAAjB;AACH,GAFQ,EAEN,EAFM,CAAT;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,WAAW,CAAC,EAAE,GAAGE;AAAL,KAAD,CAAX;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAmBJ,KAAzB;AACA,sBACI;AAAA,2BACI;AAAO,MAAA,GAAG,EAAED,QAAZ;AAAsB,MAAA,SAAS,EAAC,cAAhC;AAA+C,MAAA,IAAI,EAAC,MAApD;AAA2D,MAAA,KAAK,EAAEK,YAAlE;AAAgF,MAAA,QAAQ,EAAGC,EAAD,IAAQJ,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,WAAR;AAAqBF,QAAAA,YAAY,EAAEC,EAAE,CAACE,MAAH,CAAUC;AAA7C,OAAD,CAA1G;AAAkK,MAAA,WAAW,EAAC;AAA9K;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAlBeX,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useReducer, useRef } from 'react'\nimport moviesReducer from '../store/reducers/MoviesReducer'\nimport { initialstateMovies } from '../store/reducers/MoviesReducer'\n// const initialstateMovies = {\n//     filterByName: null\n// }\n// function moviesReducer(state = initialstateMovies, action) {\n//     switch (action.type) {\n//         case 'FILTER_BY':\n//             return {\n//                 ...state,\n//                 filterByName: action.filterByName\n//             }\n\n//     }\n// }\nexport function FilterMovie({ onSetFilter }) {\n    const inputRef = useRef(null)\n    const [state, dispatch] = useReducer(moviesReducer, initialstateMovies)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    }, [])\n    useEffect(() => {\n        onSetFilter({ ...state })\n    }, [state])\n\n    const { filterByName } = state\n    return (\n        <div>\n            <input ref={inputRef} className=\"filterMovies\" type=\"text\" value={filterByName} onChange={(ev) => dispatch({ type: 'FILTER_BY', filterByName: ev.target.value })} placeholder=\"search\" />\n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}