{"ast":null,"code":"var _jsxFileName = \"/Users/amit/Desktop/Dev/Simples/netflix-app/src/cmps/FilterMovie.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { moviesReducer } from '../store/reducers/MoviesReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FilterMovie() {\n  _s();\n\n  const inputRef = useRef(null);\n  const [state, dispatch] = useReducer(moviesReducer, initialState);\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      className: \"filterMovies\",\n      type: \"text\",\n      placeholder: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FilterMovie, \"G6HICnW9++AzYHBYbI39r9DB014=\");\n\n_c = FilterMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterMovie\");","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/src/cmps/FilterMovie.jsx"],"names":["React","useEffect","moviesReducer","FilterMovie","inputRef","useRef","state","dispatch","useReducer","initialState","current","focus"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,iCAA9B;;AAEA,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC1B,QAAMC,QAAQ,GAAGC,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,UAAU,CAACN,aAAD,EAAgBO,YAAhB,CAApC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,QAAQ,CAACM,OAAT,CAAiBC,KAAjB;AAEH,GAHQ,EAGN,EAHM,CAAT;AAIA,sBACI;AAAA,2BACI;AAAO,MAAA,GAAG,EAAEP,QAAZ;AAAsB,MAAA,SAAS,EAAC,cAAhC;AAA+C,MAAA,IAAI,EAAC,MAApD;AAA2D,MAAA,WAAW,EAAC;AAAvE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAdeD,W;;KAAAA,W","sourcesContent":["import React, { useEffect } from 'react'\nimport { moviesReducer } from '../store/reducers/MoviesReducer'\n\nexport function FilterMovie() {\n    const inputRef = useRef(null)\n    const [state, dispatch] = useReducer(moviesReducer, initialState)\n\n    useEffect(() => {\n        inputRef.current.focus()\n\n    }, [])\n    return (\n        <div>\n            <input ref={inputRef} className=\"filterMovies\" type=\"text\" placeholder=\"search\" />\n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}