{"ast":null,"code":"import blue from '../assets/img/blue.png';\nimport red from '../assets/img/red.png';\nimport yellow from '../assets/img/yellow.png';\nimport green from '../assets/img/green.png';\nimport { httpService } from './httpService';\nconst BASE_URL = 'api';\n\nasync function login(userNetflix) {\n  const user = await httpService.post(`${BASE_URL}/auth/login`, userNetflix);\n\n  if (user) {\n    console.log('user is succses is:', user);\n\n    _saveLocalUser(user);\n\n    return user;\n  } // return httpService.get(`${BASE_URL}/user`)\n\n}\n\nasync function getUser(email, password) {\n  const info = {};\n  info.email = email;\n  info.password = password;\n  const user = await httpService.get(`${BASE_URL}/user`, info);\n  return Promise.resolve(user);\n} // function getProfiles(profile) {\n//     const profilesToUser = users.filter(user => user.nickname === nickname)\n//     return Promise.resolve(profilesToUser)\n// }\n// async function getProfile(info) {\n//     const { profileId, nicknameUser } = info\n//     const idx = users.findIndex(user => user.nickname === nicknameUser)\n//     const profile = users[idx].profiles.find(profile => profile._id === profileId)\n//     console.log(' profileis:', profile);\n//     return profile\n// }\n\n\nfunction _saveLocalUser(user) {\n  sessionStorage.setItem('loggedinUser', JSON.stringify(user));\n  return user;\n}\n\nfunction _makeId(length = 5) {\n  var text = \"\";\n  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\nexport const userService = {\n  login,\n  // getProfiles,\n  // getProfile,\n  _makeId\n};","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/usersService.js"],"names":["blue","red","yellow","green","httpService","BASE_URL","login","userNetflix","user","post","console","log","_saveLocalUser","getUser","email","password","info","get","Promise","resolve","sessionStorage","setItem","JSON","stringify","_makeId","length","text","possible","i","charAt","Math","floor","random","userService"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,MAAMC,QAAQ,GAAG,KAAjB;;AAGA,eAAeC,KAAf,CAAqBC,WAArB,EAAkC;AAC9B,QAAMC,IAAI,GAAG,MAAMJ,WAAW,CAACK,IAAZ,CAAkB,GAAEJ,QAAS,aAA7B,EAA2CE,WAA3C,CAAnB;;AACA,MAAIC,IAAJ,EAAU;AACNE,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAnC;;AACAI,IAAAA,cAAc,CAACJ,IAAD,CAAd;;AACA,WAAOA,IAAP;AACH,GAN6B,CAO9B;;AACH;;AACD,eAAeK,OAAf,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AACpC,QAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACF,KAAL,GAAaA,KAAb;AACAE,EAAAA,IAAI,CAACD,QAAL,GAAgBA,QAAhB;AACA,QAAMP,IAAI,GAAG,MAAMJ,WAAW,CAACa,GAAZ,CAAiB,GAAEZ,QAAS,OAA5B,EAAoCW,IAApC,CAAnB;AACA,SAAOE,OAAO,CAACC,OAAR,CAAgBX,IAAhB,CAAP;AACH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,SAASI,cAAT,CAAwBJ,IAAxB,EAA8B;AAC1BY,EAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCC,IAAI,CAACC,SAAL,CAAef,IAAf,CAAvC;AACA,SAAOA,IAAP;AACH;;AAED,SAASgB,OAAT,CAAiBC,MAAM,GAAG,CAA1B,EAA6B;AACzB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,gEAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC7BF,IAAAA,IAAI,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACF,MAApC,CAAhB,CAAR;AACH;;AACD,SAAOC,IAAP;AACH;;AACD,OAAO,MAAMO,WAAW,GAAG;AACvB3B,EAAAA,KADuB;AAEvB;AACA;AACAkB,EAAAA;AAJuB,CAApB","sourcesContent":["import blue from '../assets/img/blue.png'\nimport red from '../assets/img/red.png'\nimport yellow from '../assets/img/yellow.png'\nimport green from '../assets/img/green.png'\nimport { httpService } from './httpService'\n\nconst BASE_URL = 'api'\n\n\nasync function login(userNetflix) {\n    const user = await httpService.post(`${BASE_URL}/auth/login`, userNetflix)\n    if (user) {\n        console.log('user is succses is:', user);\n        _saveLocalUser(user)\n        return user\n    }\n    // return httpService.get(`${BASE_URL}/user`)\n}\nasync function getUser(email, password) {\n    const info = {}\n    info.email = email\n    info.password = password\n    const user = await httpService.get(`${BASE_URL}/user`, info)\n    return Promise.resolve(user)\n}\n// function getProfiles(profile) {\n//     const profilesToUser = users.filter(user => user.nickname === nickname)\n//     return Promise.resolve(profilesToUser)\n// }\n// async function getProfile(info) {\n//     const { profileId, nicknameUser } = info\n//     const idx = users.findIndex(user => user.nickname === nicknameUser)\n//     const profile = users[idx].profiles.find(profile => profile._id === profileId)\n\n//     console.log(' profileis:', profile);\n//     return profile\n// }\n\nfunction _saveLocalUser(user) {\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\n    return user\n}\n\nfunction _makeId(length = 5) {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nexport const userService = {\n    login,\n    // getProfiles,\n    // getProfile,\n    _makeId\n}"]},"metadata":{},"sourceType":"module"}