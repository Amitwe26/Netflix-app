{"ast":null,"code":"import { LoginService } from '../../services/LoginService';\nimport { storageService } from '../../services/storageService';\nimport { userService } from '../../services/usersService'; //creators\n\nconst _setProfiles = users => ({\n  type: 'SET_USERS',\n  users\n});\n\nconst _getUser = user => ({\n  type: 'GET_USER',\n  user\n});\n\nconst _setProfile = profile => ({\n  type: 'SET_PROFILE',\n  profile\n});\n\nconst _setNetflixUser = nicknameLogin => ({\n  type: 'SET_NETFLIX_USER',\n  nicknameLogin\n}); // Dispatchers\n//THANK\n\n\nexport function loadProfiles(nickname) {\n  return async dispatch => {\n    try {\n      const users = await userService.getProfiles(nickname);\n      storageService.saveToStorage('Profiles', users[0].profiles);\n      dispatch(_setProfiles(users[0].profiles));\n    } catch (err) {\n      console.log('catch to get users!', err);\n    }\n  };\n}\nexport function getUser(userId) {\n  return dispatch => {\n    const user = userService.getUser(userId);\n    dispatch(_getUser(user));\n  };\n}\nexport function changeProfile(profile, users) {\n  return dispatch => {\n    storageService.saveToStorage('profile', profile);\n    dispatch(_getUser(profile));\n  };\n}\nexport function setProfile(info) {\n  return async dispatch => {\n    console.log('info is:', info);\n    const profile = await userService.getProfile(info);\n    storageService.saveToStorage('profile', profile);\n    dispatch(_setProfile(profile));\n  };\n}\nexport function setNetflixUser(user) {\n  return async dispatch => {\n    const nicknameLogin = await LoginService.doLogin(user);\n    dispatch(_setNetflixUser(nicknameLogin));\n  };\n}","map":{"version":3,"sources":["/Users/amit/Desktop/Dev/Simples/netflix-app/src/store/actions/UserAction.js"],"names":["LoginService","storageService","userService","_setProfiles","users","type","_getUser","user","_setProfile","profile","_setNetflixUser","nicknameLogin","loadProfiles","nickname","dispatch","getProfiles","saveToStorage","profiles","err","console","log","getUser","userId","changeProfile","setProfile","info","getProfile","setNetflixUser","doLogin"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,WAAT,QAA4B,6BAA5B,C,CAGA;;AACA,MAAMC,YAAY,GAAIC,KAAD,KAAY;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBD,EAAAA;AAArB,CAAZ,CAArB;;AACA,MAAME,QAAQ,GAAIC,IAAD,KAAW;AAAEF,EAAAA,IAAI,EAAE,UAAR;AAAoBE,EAAAA;AAApB,CAAX,CAAjB;;AACA,MAAMC,WAAW,GAAIC,OAAD,KAAc;AAAEJ,EAAAA,IAAI,EAAE,aAAR;AAAuBI,EAAAA;AAAvB,CAAd,CAApB;;AACA,MAAMC,eAAe,GAAIC,aAAD,KAAoB;AAAEN,EAAAA,IAAI,EAAE,kBAAR;AAA4BM,EAAAA;AAA5B,CAApB,CAAxB,C,CACA;AACA;;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AACnC,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMV,KAAK,GAAG,MAAMF,WAAW,CAACa,WAAZ,CAAwBF,QAAxB,CAApB;AACAZ,MAAAA,cAAc,CAACe,aAAf,CAA6B,UAA7B,EAAyCZ,KAAK,CAAC,CAAD,CAAL,CAASa,QAAlD;AACAH,MAAAA,QAAQ,CAACX,YAAY,CAACC,KAAK,CAAC,CAAD,CAAL,CAASa,QAAV,CAAb,CAAR;AACH,KAJD,CAKA,OAAOC,GAAP,EAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAnC;AACH;AACJ,GATD;AAUH;AAED,OAAO,SAASG,OAAT,CAAiBC,MAAjB,EAAyB;AAC5B,SAAQR,QAAD,IAAc;AACjB,UAAMP,IAAI,GAAGL,WAAW,CAACmB,OAAZ,CAAoBC,MAApB,CAAb;AACAR,IAAAA,QAAQ,CAACR,QAAQ,CAACC,IAAD,CAAT,CAAR;AACH,GAHD;AAIH;AACD,OAAO,SAASgB,aAAT,CAAuBd,OAAvB,EAAgCL,KAAhC,EAAuC;AAC1C,SAAQU,QAAD,IAAc;AACjBb,IAAAA,cAAc,CAACe,aAAf,CAA6B,SAA7B,EAAwCP,OAAxC;AACAK,IAAAA,QAAQ,CAACR,QAAQ,CAACG,OAAD,CAAT,CAAR;AACH,GAHD;AAIH;AAED,OAAO,SAASe,UAAT,CAAoBC,IAApB,EAA0B;AAC7B,SAAO,MAAOX,QAAP,IAAoB;AACvBK,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBK,IAAxB;AACA,UAAMhB,OAAO,GAAG,MAAMP,WAAW,CAACwB,UAAZ,CAAuBD,IAAvB,CAAtB;AACAxB,IAAAA,cAAc,CAACe,aAAf,CAA6B,SAA7B,EAAwCP,OAAxC;AACAK,IAAAA,QAAQ,CAACN,WAAW,CAACC,OAAD,CAAZ,CAAR;AACH,GALD;AAMH;AAED,OAAO,SAASkB,cAAT,CAAwBpB,IAAxB,EAA8B;AACjC,SAAO,MAAMO,QAAN,IAAkB;AACrB,UAAMH,aAAa,GAAG,MAAMX,YAAY,CAAC4B,OAAb,CAAqBrB,IAArB,CAA5B;AACAO,IAAAA,QAAQ,CAACJ,eAAe,CAACC,aAAD,CAAhB,CAAR;AACH,GAHD;AAIH","sourcesContent":["import { LoginService } from '../../services/LoginService';\nimport { storageService } from '../../services/storageService';\nimport { userService } from '../../services/usersService';\n\n\n//creators\nconst _setProfiles = (users) => ({ type: 'SET_USERS', users })\nconst _getUser = (user) => ({ type: 'GET_USER', user })\nconst _setProfile = (profile) => ({ type: 'SET_PROFILE', profile })\nconst _setNetflixUser = (nicknameLogin) => ({ type: 'SET_NETFLIX_USER', nicknameLogin })\n// Dispatchers\n//THANK\nexport function loadProfiles(nickname) {\n    return async (dispatch) => {\n        try {\n            const users = await userService.getProfiles(nickname)\n            storageService.saveToStorage('Profiles', users[0].profiles)\n            dispatch(_setProfiles(users[0].profiles))\n        }\n        catch (err) {\n            console.log('catch to get users!', err);\n        }\n    }\n}\n\nexport function getUser(userId) {\n    return (dispatch) => {\n        const user = userService.getUser(userId)\n        dispatch(_getUser(user))\n    }\n}\nexport function changeProfile(profile, users) {\n    return (dispatch) => {\n        storageService.saveToStorage('profile', profile)\n        dispatch(_getUser(profile))\n    }\n}\n\nexport function setProfile(info) {\n    return async (dispatch) => {\n        console.log('info is:', info);\n        const profile = await userService.getProfile(info)\n        storageService.saveToStorage('profile', profile)\n        dispatch(_setProfile(profile))\n    }\n}\n\nexport function setNetflixUser(user) {\n    return async dispatch => {\n        const nicknameLogin = await LoginService.doLogin(user)\n        dispatch(_setNetflixUser(nicknameLogin))\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}