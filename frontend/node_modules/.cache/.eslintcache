[{"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/index.js":"1","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/App.jsx":"2","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/reducers/UserReducer.js":"3","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/reducers/MoviesReducer.js":"4","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/NetflixApp.jsx":"5","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Home.jsx":"6","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Profiles.jsx":"7","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Register.jsx":"8","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/storageService.js":"9","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/actions/UserAction.js":"10","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/Banner.jsx":"11","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/MoveiList.jsx":"12","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/NavBar.jsx":"13","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/usersService.js":"14","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/movieService.js":"15","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/LoginService.js":"16","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/ModalMovie.jsx":"17","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/actions/MovieAction.js":"18","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/FilterMovie.jsx":"19","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/UsersModal.jsx":"20","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/httpService.js":"21","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/ProfilePreview.jsx":"22"},{"size":908,"mtime":1614964425971,"results":"23","hashOfConfig":"24"},{"size":151,"mtime":1614070395170,"results":"25","hashOfConfig":"24"},{"size":975,"mtime":1615999149438,"results":"26","hashOfConfig":"24"},{"size":477,"mtime":1614964236457,"results":"27","hashOfConfig":"24"},{"size":687,"mtime":1616604886890,"results":"28","hashOfConfig":"24"},{"size":2533,"mtime":1616603906839,"results":"29","hashOfConfig":"24"},{"size":3279,"mtime":1616601850991,"results":"30","hashOfConfig":"24"},{"size":5737,"mtime":1616601258206,"results":"31","hashOfConfig":"24"},{"size":326,"mtime":1614180432245,"results":"32","hashOfConfig":"24"},{"size":2166,"mtime":1616598856016,"results":"33","hashOfConfig":"24"},{"size":1072,"mtime":1615221196725,"results":"34","hashOfConfig":"24"},{"size":1502,"mtime":1615048951395,"results":"35","hashOfConfig":"24"},{"size":4966,"mtime":1616605581262,"results":"36","hashOfConfig":"24"},{"size":2304,"mtime":1616596922264,"results":"37","hashOfConfig":"24"},{"size":2695,"mtime":1614962523268,"results":"38","hashOfConfig":"24"},{"size":633,"mtime":1615997115484,"results":"39","hashOfConfig":"24"},{"size":1530,"mtime":1614095034944,"results":"40","hashOfConfig":"24"},{"size":594,"mtime":1614964795608,"results":"41","hashOfConfig":"24"},{"size":1280,"mtime":1614333709226,"results":"42","hashOfConfig":"24"},{"size":1060,"mtime":1616605761391,"results":"43","hashOfConfig":"24"},{"size":1034,"mtime":1615994199277,"results":"44","hashOfConfig":"24"},{"size":900,"mtime":1616601215986,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1gwchot",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/index.js",[],["99","100"],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/App.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/reducers/UserReducer.js",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/reducers/MoviesReducer.js",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/NetflixApp.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Home.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Profiles.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/pages/Register.jsx",["101"],"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { LoginService } from '../services/LoginService'\nimport { setNetflixUser, signup } from '../store/actions/UserAction'\n\nexport function Register() {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const [login, setLogin] = useState(false)\n    const [signupModal, setSignupModal] = useState(false)\n    const [email, setEmail] = useState('')\n    const [emailSignUp, setEmailSignUp] = useState('')\n    const [password, setPassword] = useState('')\n    const [msg, setMsg] = useState('')\n    const [newUser, setNewUser] = useState({})\n\n    const signinHandleChange = ev => {\n        const { name, value } = ev.target\n        if (name === 'email') setEmail(value)\n        if (name === 'password') setPassword(value)\n    }\n\n    const emailHandleChange = ev => {\n        const email = ev.target.value\n        setEmailSignUp(email)\n\n    }\n    const signupHandleChange = ev => {\n        const { name, value } = ev.target\n        if (name === 'email') {\n            setEmailSignUp(value)\n            console.log('emailSignUp is:', emailSignUp);\n        }\n        setNewUser(prevState => ({\n            newUser: {\n                ...prevState.newUser,\n                [name]: value\n\n            }\n        }))\n        console.log('newUser is:', newUser);\n    }\n\n    const dosignIn = async ev => {\n        ev.preventDefault()\n        if (!email || !password) {\n            setMsg('you need username and password')\n        }\n        else {\n            try {\n                const netflixUser = { email, password }\n                const user = await dispatch(setNetflixUser(netflixUser))\n                if (user) history.push('/user')\n\n            } catch {\n                console.log(' we have problem to login');\n            }\n        }\n    }\n\n    const goToSignUp = ev => {\n        ev.preventDefault()\n        setLogin(true)\n        setSignupModal(true)\n    }\n\n    const doSignUp = ev => {\n        ev.preventDefault()\n        const { username, fullname, password } = newUser.newUser\n        if (!username || !fullname || !password) {\n            console.log('im in');\n            return setMsg('All inputs are required')\n        }\n        try {\n            dispatch(signup(newUser))\n            history.push('/user')\n        }\n        catch {\n            console.log('failed to try sign up');\n        }\n    }\n\n\n    return (\n        <div className=\"about-page\">\n            <img\n                className=\"hero-image\"\n                src=\"https://assets.nflxext.com/ffe/siteui/vlv3/8ef88e03-6f89-4c75-ae51-f8da7d252358/2ff1ee62-fcfb-451d-b85b-428037875aee/IL-he-20210208-popsignuptwoweeks-perspective_alpha_website_small.jpg\" alt=\"\" />\n            <div className=\"hero-contact\">\n                <div className=\"top-hero\">\n                    <img\n                        onClick={() => setLogin(false)}\n                        className=\"logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"\" />\n                    {!login && <button onClick={() => setLogin(!login)}>Login</button>}\n                </div>\n\n                {!login && <div className=\"botoom-hero\">\n                    <h1>Movies, TV shows and more unlimited.</h1>\n                    <h2>Watch everywhere. Cancel at any stage.</h2>\n                    <form onSubmit={goToSignUp}>\n                        <h3>Want to start watching? Enter your email address to subscribe or reactivate a subscription.</h3>\n                        <div className=\"submit-div\">\n                            <input type=\"text\" placeholder=\"Email address\" onChange={emailHandleChange} />\n                            <button>Lets Go</button>\n                        </div>\n                    </form>\n                </div>}\n\n                {login && <div className=\"login-modal\">\n                    {!signupModal &&\n                        <form onSubmit={dosignIn}>\n                            <h1>Sign in</h1>\n                            {msg && <span>{msg}</span>}\n                            <input type=\"text\" name=\"email\" value={email} onChange={signinHandleChange} placeholder=\"Email or number\" />\n                            <input type=\"password\" name=\"password\" value={password} onChange={signinHandleChange} placeholder=\"Password\" />\n                            <button className=\"login-btn\">Login</button>\n                        </form>\n                    }\n\n                    {signupModal &&\n                        <div>\n                            <form onSubmit={doSignUp}>\n                                {msg && <span>{msg}</span>}\n                                <input type=\"text\" name=\"email\" value={emailSignUp} placeholder=\"Email\" onChange={signupHandleChange} />\n                                <input type=\"text\" name=\"fullname\" placeholder=\"Full Name\" onChange={signupHandleChange} />\n                                <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={signupHandleChange} />\n                                <input type=\"text\" name=\"username\" placeholder=\"User Name\" onChange={signupHandleChange} />\n                                <button className=\"login-btn\">Do SingUp</button>\n                            </form>\n                        </div>}\n                    {/*need to working on singup and connect the auth on login after we ave the singup */}\n                    <span onClick={() => setSignupModal(!signupModal)} style={{ color: 'white' }}>\n                        {signupModal ? 'you have user? go to login' : `New to Netflix? `}\n                    </span>\n                </div>}\n            </div>\n        </div>\n    )\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/storageService.js",["102"],"'use strict';\nexport const storageService = {\n    loadFromStorage,\n    saveToStorage\n}\nfunction loadFromStorage(key) {\n    var json = localStorage.getItem(key)\n    var value = JSON.parse(json)\n    return value;\n}\nfunction saveToStorage(key, value) {\n    var json = JSON.stringify(value);\n    localStorage.setItem(key, json)\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/actions/UserAction.js",["103"],"import { LoginService } from '../../services/LoginService';\nimport { storageService } from '../../services/storageService';\nimport { userService } from '../../services/usersService';\n\n\n//creators\nconst _setProfiles = (users) => ({ type: 'SET_USERS', users })\nconst _getUser = (user) => ({ type: 'GET_USER', user })\nconst _setProfile = (profile) => ({ type: 'SET_PROFILE', profile })\nconst _setNetflixUser = (userLogin) => ({ type: 'SET_NETFLIX_USER', userLogin })\n// Dispatchers\n//THANK\nexport function loadProfiles(user) {\n    return async (dispatch) => {\n        try {\n            const profiles = await userService.getProfiles(user)\n            dispatch(_setProfiles(profiles))\n        }\n        catch (err) {\n            console.log('catch to get profiles!', err);\n        }\n    }\n}\n\nexport function getUser(userId) {\n    return (dispatch) => {\n        const user = userService.getUser(userId)\n        dispatch(_getUser(user))\n    }\n}\n// export function changeActiveProfile(profile, users) {\n//     return (dispatch) => {\n//         storageService.saveToStorage('profile', profile)\n//         dispatch(_getUser(profile))\n//     }\n// }\n\nexport function setProfile(profile) {\n    return async (dispatch) => {\n        try {\n            storageService.saveToStorage('profile', profile)\n            dispatch(_setProfile(profile))\n        }\n        catch (err) {\n            console.log('err to set profile is:', err);\n        }\n    }\n}\n\nexport function setNetflixUser(user) {\n    return async dispatch => {\n        try {\n            const userLogin = await userService.login(user)\n            if (userLogin) {\n                dispatch(_setNetflixUser(userLogin))\n                return userLogin\n            }\n        }\n        catch (err) {\n            console.log('err to set user is:', err);\n        }\n    }\n}\n\nexport function signup(userCreds) {\n    return async dispatch => {\n        try {\n            const user = await userService.signup(userCreds)\n            console.log('user in action is:', user);\n            dispatch(_setNetflixUser(user))\n            return user\n        }\n        catch {\n            console.log('failed to signup ');\n        }\n    }\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/Banner.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/MoveiList.jsx",["104","105","106"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { moveiService } from '../services/movieService'\n// import { setMovies } from '../store/actions/MovieAction'\n\nconst BASE_URL_IMG = 'https://image.tmdb.org/t/p/original'\n\n\nexport function MoveiList({ request, toggleModal, idx }) {\n\n    // const { movies } = useSelector(state => state.moviesModule)\n    const { filterBy } = useSelector(state => state.userModule)\n    // const dispatch = useDispatch()\n\n    const [movies, setMovies] = useState([])\n    const [highRow, sethigtRow] = useState(false)\n\n    useEffect(() => {\n        getMovies()\n        if (movies) {\n            (idx === 0 || idx === 3) ? sethigtRow(true) : sethigtRow(false)\n        }\n    }, [])\n\n    async function getMovies() {\n        const { title, url } = request\n        // dispatch(setMovies(title, url))\n        let movies = await moveiService.getMovies(title, url)\n        setMovies(movies)\n    }\n\n\n    return (\n        <div >\n            <p>{request.title}</p>\n            <div className=\"row-movie\">\n                {movies?.map(movie => {\n                    return <img\n                        key={movie.id}\n                        onClick={() => toggleModal(movie)}\n                        className={`${highRow ? 'highRow' : 'lowerRow'}`}\n                        src={`${BASE_URL_IMG}${highRow ? movie.poster_path : movie.backdrop_path}`} alt=\"\" />\n                })}\n            </div>\n        </div>\n    )\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/NavBar.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/usersService.js",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/movieService.js",["107","108"],"import axios from \"axios\"\nimport { storageService } from \"./storageService\"\n\n\nconst BASE_URL = 'https://api.themoviedb.org/'\nconst KEY_WORD = 'bannerImg'\n\n\nconst API_KEY = '966d25f68b2beabae673d956bfe0476d'\n\n\nconst requests = [\n\n    { title: 'Trending', url: `/trending/all/week?api_key=${API_KEY}&language=en-US` },\n    { title: 'Top Rated', url: `/movie/top_rated?api_key=${API_KEY}&language=en-US` },\n    { title: 'Action Movies', url: `/discover/movie?api_key=${API_KEY}&with_genres=28` },\n    { title: 'Netflix Originals', url: `/discover/tv?api_key=${API_KEY}&with_networks=213` },\n    { title: 'Most popular ', url: `/discover/movie?api_key=${API_KEY}&sort_by=popularity.desc` },\n    { title: 'Comedy Movies', url: `/discover/movie?api_key=${API_KEY}&with_genres=35` },\n    { title: 'Documentaries', url: `/discover/movie?api_key=${API_KEY}&with_genres=99` },\n    { title: 'Horror Movies', url: `/discover/movie?api_key=${API_KEY}&with_genres=27` },\n    { title: 'Drama Movies', url: `/discover/movie?api_key=${API_KEY}&with_genres=18` },\n    { title: 'Tom Cruise', url: `/discover/movie?api_key=${API_KEY}&with_genres=878` },\n]\n\n\nasync function query() {\n    const moviesToBanner = storageService.loadFromStorage(KEY_WORD)\n    if (!moviesToBanner) {\n        try {\n            const res = await axios.get(`${BASE_URL}3/list/1?api_key=${API_KEY}`)\n            const movies = res.data\n            storageService.saveToStorage(KEY_WORD, movies)\n            return movies\n        }\n        catch {\n            console.log('err to get movies list to Banner');\n        }\n    }\n    return moviesToBanner\n}\n\nfunction getRequests() {\n    // return Promise.resolve(requests)\n    return requests\n}\n\nasync function getMovies(title, fetch, filterBy) { //filterBY is undifind !!!!!!!!\n    const moviesLists = storageService.loadFromStorage(title)\n    if (filterBy) {\n        const moviesFilter = moviesLists.filter(movie => {\n            if (movie.name) return movie.name.toLowerCase().includes(filterBy.toLowerCase())\n            else return movie.title.toLowerCase().includes(filterBy.toLowerCase())\n        })\n        // console.log('movies after filter is:', moviesFilter);\n        // return moviesFilter\n        // return Promise.resolve(moviesFilter)\n    }\n    else if (moviesLists) return moviesLists\n    else {\n        const req = await axios.get(`${BASE_URL}3${fetch}`)\n        const movies = req.data.results\n        storageService.saveToStorage(title, movies)\n\n        return movies\n    }\n}\nfunction _loadMovies() {\n    const movies = storageService.loadFromStorage(KEY_WORD)\n    console.log('movies is:', movies);\n}\n\nexport const moveiService = {\n    query,\n    getMovies,\n    getRequests\n}","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/LoginService.js",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/ModalMovie.jsx",["109"],"import React, { useEffect } from 'react'\n\nconst BASE_URL_IMG = 'https://image.tmdb.org/t/p/original'\n\nexport function ModalMovie({ movie, setOpenModal }) {\n    useEffect(() => {\n        window.addEventListener('scroll', closeModal)\n        return () => window.removeEventListener('scroll', closeModal)\n    }, [])\n\n    const closeModal = () => {\n        if (window.scrollY) {\n            const close = setInterval(() => {\n                setOpenModal(false)\n                clearInterval(close)\n            }, 500)\n        }\n        else setOpenModal(true)\n    }\n\n    return (\n        <div className=\"modal-movie\">\n            <img className=\"img-modal\" src={`${BASE_URL_IMG}${movie.backdrop_path}`} alt=\"\" />\n            <div className=\"info\">\n                <div className=\"top flex\">\n                    <div className=\"left-btn\">\n                        <button title=\"Options\">▼</button>\n                    </div>\n                    <div>\n                        <button title=\"Unlike\">✘</button>\n                        <button title=\"Like\">✓</button>\n                        <button title=\"Add\">+</button>\n                        <button title=\"Play\">➤</button>\n                    </div>\n                </div>\n                <div className=\"bottom\">\n                    <h2>{movie.title || movie.name}</h2>\n                    <p className=\"over-view\">{movie.overview}</p>\n                    <p>{movie.release_date || movie.first_air_date}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/store/actions/MovieAction.js",["110"],"import { moveiService, movieService } from '../../services/movieService';\n\nconst _setMovies = (movies) => ({ type: 'SET_MOVIES', movies })\nconst _setFilter = (filterBy) => ({ type: 'FILTER_BY', filterBy })\n\nexport function setFilter(filterBy) {\n    return async (dispatch) => dispatch(_setFilter(filterBy))\n}\n\nexport function setMovies(title, url) {\n    return async (dispatch) => {\n        try {\n            let movies = await moveiService.getMovies(title, url)\n            dispatch(_setMovies(movies))\n        }\n        catch {\n            console.log('cant to set movies');\n        }\n    }\n}","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/FilterMovie.jsx",["111","112","113"],"import React, { useEffect, useReducer, useRef } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../store/actions/MovieAction'\n\n// import moviesReducer from '../store/reducers/MoviesReducer'\n// import { initialstateMovies } from '../store/reducers/MoviesReducer'\nconst initialstateMovies = {\n    Name: ''\n}\nexport default function filterReducer(state = initialstateMovies, action) {\n    switch (action.type) {\n        case 'SET_NAME':\n            return {\n                ...state,\n                Name: action.Name\n            }\n        default: return state\n\n    }\n}\nexport function FilterMovie({ onSetFilter }) {\n    const inputRef = useRef(null)\n    // const dispatch = useDispatch()\n\n    const [state, dispatch] = useReducer(filterReducer, initialstateMovies)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    }, [])\n\n    useEffect(() => {\n        onSetFilter({ ...state })\n    }, [state])\n\n    const { Name } = state\n    return (\n        <div>\n            <input ref={inputRef}\n                className=\"filterMovies\"\n                type=\"text\" value={Name}\n                onChange={(ev) => dispatch({ type: 'SET_NAME', Name: ev.target.value })\n                }\n                placeholder=\"search\" />\n\n        </div>\n    )\n}\n","/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/UsersModal.jsx",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/services/httpService.js",[],"/Users/amit/Desktop/Dev/Simples/netflix-app/frontend/src/cmps/ProfilePreview.jsx",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","messageId":"125","endLine":1,"endColumn":14,"fix":"126"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":22},{"ruleId":"118","severity":1,"message":"127","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":21},{"ruleId":"118","severity":1,"message":"128","line":12,"column":13,"nodeType":"120","messageId":"121","endLine":12,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":23,"column":8,"nodeType":"131","endLine":23,"endColumn":10,"suggestions":"132"},{"ruleId":"118","severity":1,"message":"133","line":51,"column":15,"nodeType":"120","messageId":"121","endLine":51,"endColumn":27},{"ruleId":"118","severity":1,"message":"134","line":68,"column":10,"nodeType":"120","messageId":"121","endLine":68,"endColumn":21},{"ruleId":"129","severity":1,"message":"135","line":9,"column":8,"nodeType":"131","endLine":9,"endColumn":10,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":1,"column":24,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"127","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":21},{"ruleId":"118","severity":1,"message":"138","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":19},{"ruleId":"129","severity":1,"message":"139","line":33,"column":8,"nodeType":"131","endLine":33,"endColumn":15,"suggestions":"140"},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'LoginService' is defined but never used.","Identifier","unusedVar","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"143","text":"144"},"'useDispatch' is defined but never used.","'filterBy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMovies', 'idx', and 'movies'. Either include them or remove the dependency array.","ArrayExpression",["145"],"'moviesFilter' is assigned a value but never used.","'_loadMovies' is defined but never used.","React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array.",["146"],"'movieService' is defined but never used.","'setFilter' is defined but never used.","React Hook useEffect has a missing dependency: 'onSetFilter'. Either include it or remove the dependency array. If 'onSetFilter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["147"],"no-global-assign","no-unsafe-negation",[0,13],"",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [getMovies, idx, movies]",{"range":"154","text":"155"},"Update the dependencies array to be: [closeModal]",{"range":"156","text":"157"},"Update the dependencies array to be: [onSetFilter, state]",{"range":"158","text":"159"},[767,769],"[getMovies, idx, movies]",[309,311],"[closeModal]",[930,937],"[onSetFilter, state]"]